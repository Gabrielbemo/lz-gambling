# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - uses: mr-smithers-excellent/docker-build-push@v6
      name: Build & push Docker image
      with:
        image: gabrielbemo/lz-gambling
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

  sonar:
    runs-on: ubuntu-latest
    needs: build
    services:
      sonarqube:
        image: sonarqube:lts-community
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/system/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        ports:
          - "9000:9000"

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'


      - name: Criar Token Admin do SonarQube
        run: |
          curl -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate" \
            -d "name=admin_token" | jq -r '.token' > sonar_token.txt
          echo "SONAR_TOKEN=$(cat sonar_token.txt)" >> $GITHUB_ENV

      - name: Compilar e rodar testes
        run: mvn clean verify

      - name: Rodar análise com SonarQube
        run: |
          mvn sonar:sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Parar SonarQube
        if: always()
        run: docker stop $(docker ps -q --filter ancestor=sonarqube:lts-community)
